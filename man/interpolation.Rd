% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolation.R
\name{interpolation}
\alias{interpolation}
\title{Smart Interpolation Function}
\usage{
interpolation(
  x,
  y,
  x_new,
  data = NULL,
  y_cols = NULL,
  method = c("auto", "linear", "quadratic", "lagrange", "spline")
)
}
\arguments{
\item{x}{Numeric vector of x-values.}

\item{y}{Numeric vector of y-values (ignored if using a dataframe).}

\item{x_new}{Numeric vector of new x-values to interpolate.}

\item{data}{Optional dataframe containing y-values to interpolate.}

\item{y_cols}{Character vector of column names in \code{data} containing y-values.}

\item{method}{Character. Interpolation method: \code{"auto"}, \code{"linear"}, \code{"quadratic"}, \code{"lagrange"}, or \code{"spline"}.
Default is \code{"auto"} (chooses the best method based on the number of points).}
}
\value{
If vectors \code{x} and \code{y} are provided, returns a named numeric vector of interpolated values.
If a dataframe is provided, returns the original dataframe with additional interpolated columns.
}
\description{
Performs interpolation on numeric data, supporting linear, quadratic,
Lagrange, and cubic spline methods. Can handle both vector and dataframe inputs.
}
\examples{
# Example 1: Interpolating between points (vector input)
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
x_new <- c(2.5, 3.5, 4.5)
interpolation(x, y, x_new, method = "linear")

# Example 2: Interpolating for a dataframe
data <- data.frame(
  category = c("A", "B", "C"),
  y1 = c(2, 5, 9),
  y2 = c(3, 6, 10)
)
x_new <- c(2.5, 3.5)
interpolation(x = c(1, 2), data = data, y_cols = c("y1", "y2"), x_new = x_new, method = "spline")

}
