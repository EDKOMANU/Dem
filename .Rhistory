devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
#Example without moratlity rate
data <- data.frame(
Age = c(0, 1, 5, 10, 15, 20, 85), # Open-ended group is 85+
pop = c(1000, 900, 800, 700, 600, 500, 200),
Dx = c(100, 50, 20, 10, 5, 3, 2))
result <- dem.lifetables(data, age = "Age", pop = "pop", Dx = "Dx")
View(result)
result[["lifetable"]]
devtools::load_all(".")
devtools::load_all(".")
gphc2010<-read_csv("C:/Users/PROXIMITY REPORT/Downloads/age_population_data.csv")
use_data(gphc2010)
View(gphc2010)
names(gphc2010)
type(gphc2010$`Age Group`)
class(gphc2010$`Age Group`)
gphc2010<-gphc2010 |>
mutate(Age = ifelse(`Age Group`==82, 85, `Age Group`))
View(gphc2010)
gphc2010<-gphc2010 |>
select(Age, Pop=`Total Population`, Deaths)
use_data(gphc2010)
use_data(gphc2010, overwrite = T)
load("~/GitHub/Dem/data/gphc2010.rda")
View(gphc2010)
data <- data(gphc2010)
View(data)
head(data)
data("gphc2010")
force(gphc2010)
library(Dem)
observed_data <- data.frame(
age = c(0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50),
qx = c(0.1, 0.05, 0.02, NA, 0.005, NA, 0.002, 0.0015, NA, 0.0008, 0.0006, 0.0005)
)
standard = "African"
brass_logit_model(
data = observed_data,
qx_col = "qx",
age_col = "age",
standard = "African")
# Example data with NA for some qx values
observed_data <- data.frame(
age = c(0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50),
qx = c(0.1, 0.05, 0.02, NA, 0.005, NA, 0.002, 0.0015, NA, 0.0008, 0.0006, 0.0005)
)
brass_logit_model(
data = observed_data,
qx_col = "qx",
age_col = "age",
standard = "African")
model<-brass_logit_model(
data = observed_data,
qx_col = "qx",
age_col = "age",
standard = "African")
model<-brass_logit_model(
data = observed_data,
qx_col = "qx",
age_col = "age",
standard = "GernealUN")
model<-brass_logit_model(
data = observed_data,
qx_col = "qx",
age_col = "age",
standard = "GerneralUN")
model<-brass_logit_model(
data = observed_data,
qx_col = "qx",
age_col = "age",
standard = "GeneralUN")
lifetable<- model$data
View(lifetable)
lifetable_nqx(lifetable, age="age", nqx = "predicted_qx")
library(devtools)
use_r()
use_r("karup_king")
load_all()
library(tidyverse)
load_all()
library(tidyr)
load_all()
source("~/GitHub/Dem/R/karup_king.R", echo=TRUE)
use_data(data1)
data<-readxl::read_excel("C:/Users/PROXIMITY REPORT/Documents/R directory/Projection_adj/Daffiama Bussie Issa PROJECTED TOTAL POPULATION BY AGE GROUP, 2021-2050.xlsx")
View(data)
data<data[-17,]
data<-data[-17,]
View(data)
use_data(data)
View(data)
data<-data |>
data$age_col<-data$`Age groups`
data<-data[,-`Age groups`]
data<-data$-`Age groups`
data<--data$`Age groups`
data<-data |>
select(-`Age groups`)
use_data(data)
use_data(data, overwrite = T)
first_coef <- matrix(
c(0.344, -0.208, 0.064,   # Year 1 (e.g., age 15 in 15-19)
0.248, -0.056, 0.008,   # Year 2 (age 16)
0.176, 0.048, -0.024,   # Year 3 (age 17)
0.128, 0.104, -0.032,   # Year 4 (age 18)
0.104, 0.112, -0.016),  # Year 5 (age 19)
nrow = 5, byrow = TRUE
)
# Coefficients for MIDDLE groups (columns: [previous, current, next])
middle_coef <- matrix(
c(0.064, 0.152, -0.016,   # Year 1 (e.g., age 20 in 20-24)
0.008, 0.224, -0.032,   # Year 2 (age 21)
-0.024, 0.248, -0.024,   # Year 3 (age 22)
-0.032, 0.224, 0.008,   # Year 4 (age 23)
-0.016, 0.152, 0.064),  # Year 5 (age 24)
nrow = 5, byrow = TRUE
)
# Coefficients for LAST group (columns: [previous-1, previous, current])
last_coef <- matrix(
c(-0.016, 0.112, 0.104,   # Year 1 (e.g., age 35 in 35-39)
-0.032, 0.104, 0.128,   # Year 2 (age 36)
-0.024, 0.048, 0.176,   # Year 3 (age 37)
0.008, -0.056, 0.248,   # Year 4 (age 38)
0.064, -0.208, 0.344),  # Year 5 (age 39)
nrow = 5, byrow = TRUE
)
use_data(first_coef)
use_data(middle_coef)
use_data(last_coef)
?karup_king
data(data)
karup_king(df = data,
age_col = "age_col",
pops = c("2021","2022","2023","2024","2025","2026","2027","2028", "2029","2030","2031","2032","2033","2034","2035"),
first_coef = first_coef,
middle_coef = middle_coef,
last_coef = last_coef
)
karup_king(df = data,
age_col = "age_col",
pops = c("2021","2022","2023","2024","2025","2026","2027","2028", "2029","2030","2031","2032","2033","2034","2035"),
first_coef = first_coef,
middle_coef = middle_coef,
last_coef = last_coef
)
karup_king(df = data,
age_col = "age_col",
pops = c("2021","2022","2023","2024","2025","2026","2027","2028", "2029","2030","2031","2032","2033","2034","2035"),
first_coef = first_coef,
middle_coef = middle_coef,
last_coef = last_coef
)
library(usethis)
load(tidyverse)
loadedNamespaces()
use_dev_package(tidyr)
use_dev_package("tidyr")
use_dev_package("dplyr")
use_package("tidyr")
use_description()
use_package("tidyr")
use_package("dplyr")
use_package("stats")
use_package(tidyverse)
use_package("tidyverse")
use_package("tidyverse", type = "depemds")
use_package("tidyverse", type = "depends")
devtools::load_all(".")
library(devtools)
use_r(basicPPP)
use_r(basicPPP.r)
use_r("newPPP")
devtools::load_all(".")
library(devtools)
use_vignette()
use_vignette(ppp)
use_vignette("ppp")
library(devtools)
library(testthat)
library(tidyverse)
testthat::test_check("Dem")
devtools::install_github("EDKOMANU/Dem")
usethis::use_package("testthat")
load("~/GitHub/Dem/data/standards.rda")
View(standards)
names()
names(standards)
ghphc2010
gphc2010
testdata
testdata <- testdata
first_coef
load("~/GitHub/Dem/data/data.rda")
data
View(standards)
usethis::use_git_ignore("iris-r-heroku/.RData")
importFrom("cmdstanr", "testhat")
devtools
usethis::use_import_from("cmdstanr")
usethis::use_import_from("cmdstanr", "cmdstanr")
usethis::use_import_from("cmdstanr", "install_cmdstan")
env_get_list()
usethis::use_import_from(importFrom("stats", fun=c("median", "quantile", "rnorm")))
usethis::use_import_from("stats", fun=c("median", "quantile", "rnorm"))
remove.packages("Dem")
install.packages("Dem")
devtools::install_github("EDKOMANU/Dem")
usethis::use_git_ignore("iris-r-heroku/.RData")
rstantools::rstan_config()
rstantools::use_rstan()
rstantools::use_rstan("DemogAnr")
rstantools::use_rstan(getwd())
Sys.setenv(TMPDIR = "C:/Temp")
usethis::use_rstudio_preferences()
file.show("package_name.Rcheck/00check.log")
file.show("DemogAnr.Rcheck/00check.log")
file.show("DemogAnr.Rcheck/00install.out")
cat DemogAnr.Rcheck/00install.out
cat "DemogAnr.Rcheck/00install.out"
system2("quarto", "-V", stdout = TRUE, env = paste0("TMPDIR=",  :
importFrom(brms, brm)
usethis::importFrom(brms, brm)
usethis::import_From(brms, brm)
usethis::use_import_from(brms, brm)
usethis::use_import_from("brms", "brm")
usethis::use_import_from("R6", "R6")
usethis::use_import_from("R6", "R6Class")
usethis::use_import_from("brms", "brm")
usethis::use_import_from("cmdstanr", "cmdstanr_install")
usethis::use_import_from("cmdstanr", "install_cmdstanr")
usethis::use_import_from("cmdstanr", "install_cmdstan")
usethis::use_import_from("Stats", "mean")
remove.packages("DemogAnr")
devtools::install_github("EDKOMANU/Dem")
devtools::github_release()
?devtools::github_release()
devtools::document()
smart_interpolation <- function(x, y = NULL, x_new,
data = NULL, y_cols = NULL,
method = c("auto", "linear", "quadratic", "lagrange", "spline")) {
method <- match.arg(method)
# Input validation
if (!is.null(data) && !is.null(y_cols)) {
if (!all(y_cols %in% names(data))) stop("Some y_cols not found in data")
mode <- "dataframe"
} else if (is.numeric(x) && is.numeric(y)) {
if (length(x) != length(y)) stop("x and y must have the same length")
mode <- "vector"
} else {
stop("Invalid input: Provide either (x, y) vectors or (data, y_cols) with x")
}
if (!is.numeric(x) || !is.numeric(x_new)) stop("x and x_new must be numeric")
# Check extrapolation
if (any(x_new < min(x)) || any(x_new > max(x))) {
warning("Some x_new values are outside the range of x. Extrapolation may be unreliable.")
}
# Interpolation function
interpolate_points <- function(x_points, y_points, x_val) {
if (method == "linear" || (method == "auto" && length(x_points) == 2)) {
return(approx(x_points, y_points, xout = x_val, rule = 2)$y)
} else if (method == "quadratic" || (method == "auto" && length(x_points) == 3)) {
return(lagrange_interpolate(x_points, y_points, x_val))
} else if (method == "lagrange" || (method == "auto" && length(x_points) > 3)) {
return(lagrange_interpolate(x_points, y_points, x_val))
} else if (method == "spline") {
return(spline(x_points, y_points, xout = x_val, method = "natural")$y)
}
}
# Lagrange interpolation function
lagrange_interpolate <- function(x_points, y_points, x_val) {
n <- length(x_points)
y_new <- 0
for (i in 1:n) {
term <- y_points[i]
for (j in 1:n) {
if (i != j) {
term <- term * (x_val - x_points[j]) / (x_points[i] - x_points[j])
}
}
y_new <- y_new + term
}
return(y_new)
}
# Handle different modes
if (mode == "vector") {
results <- sapply(x_new, function(x_val) interpolate_points(x, y, x_val))
names(results) <- paste0("interpolated_", x_new)
return(results)
} else {
# Fix: Apply spline row-wise for dataframes
interpolated_list <- lapply(x_new, function(x_val) {
apply(data[y_cols], 1, function(y_vals) {
interpolate_points(x, as.numeric(y_vals), x_val)
})
})
interpolated_df <- do.call(cbind, interpolated_list)
colnames(interpolated_df) <- paste0("interpolated_", x_new)
return(cbind(data, interpolated_df))
}
}
interpolation <- function(x, y = NULL, x_new,
data = NULL, y_cols = NULL,
method = c("auto", "linear", "quadratic", "lagrange", "spline")) {
method <- match.arg(method)
# Input validation
if (!is.null(data) && !is.null(y_cols)) {
if (!all(y_cols %in% names(data))) stop("Some y_cols not found in data")
mode <- "dataframe"
} else if (is.numeric(x) && is.numeric(y)) {
if (length(x) != length(y)) stop("x and y must have the same length")
mode <- "vector"
} else {
stop("Invalid input: Provide either (x, y) vectors or (data, y_cols) with x")
}
if (!is.numeric(x) || !is.numeric(x_new)) stop("x and x_new must be numeric")
# Check extrapolation
if (any(x_new < min(x)) || any(x_new > max(x))) {
warning("Some x_new values are outside the range of x. Extrapolation may be unreliable.")
}
# Interpolation function
interpolate_points <- function(x_points, y_points, x_val) {
if (method == "linear" || (method == "auto" && length(x_points) == 2)) {
return(approx(x_points, y_points, xout = x_val, rule = 2)$y)
} else if (method == "quadratic" || (method == "auto" && length(x_points) == 3)) {
return(lagrange_interpolate(x_points, y_points, x_val))
} else if (method == "lagrange" || (method == "auto" && length(x_points) > 3)) {
return(lagrange_interpolate(x_points, y_points, x_val))
} else if (method == "spline") {
return(spline(x_points, y_points, xout = x_val, method = "natural")$y)
}
}
# Lagrange interpolation function
lagrange_interpolate <- function(x_points, y_points, x_val) {
n <- length(x_points)
y_new <- 0
for (i in 1:n) {
term <- y_points[i]
for (j in 1:n) {
if (i != j) {
term <- term * (x_val - x_points[j]) / (x_points[i] - x_points[j])
}
}
y_new <- y_new + term
}
return(y_new)
}
# Handle different modes
if (mode == "vector") {
results <- sapply(x_new, function(x_val) interpolate_points(x, y, x_val))
names(results) <- paste0("interpolated_", x_new)
return(results)
} else {
# Fix: Apply spline row-wise for dataframes
interpolated_list <- lapply(x_new, function(x_val) {
apply(data[y_cols], 1, function(y_vals) {
interpolate_points(x, as.numeric(y_vals), x_val)
})
})
interpolated_df <- do.call(cbind, interpolated_list)
colnames(interpolated_df) <- paste0("interpolated_", x_new)
return(cbind(data, interpolated_df))
}
}
data <- data.frame(
category = c("A", "B", "C"),
y1 = c(2, 5, 9),
y2 = c(3, 6, 10)
)
x_new <- c(2.5, 3.5)
interpolation(x = c(1, 2, 3), data = data, y_cols = c("y1", "y2"), x_new = x_new, method = "spline")
interpolation(x = c(1, 3), data = data, y_cols = c("y1", "y2"), x_new = x_new, method = "spline")
interpolation(x = c(1, 2), data = data, y_cols = c("y1", "y2"), x_new = x_new, method = "spline")
library(readxl)
Results_update <- read_excel("~/Results update.xlsx")
View(data)
View(Results_update)
names(Results_update)
DemogAnr::interpolation(x = c(2010, 2021), y_cols = c("2010" , "2021"),
x_new = c(2011:2020))
DemogAnr::interpolation(x = c(2010, 2021), y_cols = c("2010" , "2021"),
x_new = c(2011:2020), data = Results_update)
results <-  DemogAnr::interpolation(x = c(2010, 2021), y_cols = c("2010" , "2021"),
x_new = c(2011:2020), data = Results_update)
View(results)
writexl::write_xlsx(results, "~/Results update_inter.xlsx")
Results_update <- read_excel("~/Results update.xlsx")
results <-  DemogAnr::interpolation(x = c(2000,2010, 2021), y_cols = c("2000","2010" , "2021"),
x_new = c(2011:2020), data = Results_update, method = "spline")
writexl::write_xlsx(results, "~/Results update_inter.xlsx")
results <-  DemogAnr::interpolation(x = c(2000,2010, 2021), y_cols = c("2000","2010" , "2021"),
x_new = c(2001:2009,2011:2020), data = Results_update, method = "auto")
writexl::write_xlsx(results, "~/Results update_inter.xlsx")
library(devtools)
use_vignette()
use_vignette("interpolation")
data <- data.frame(
year = c(1990, 2000, 2010),
birth_rate = c(30.5, 28.1, 25.4),
death_rate = c(10.2, 9.8, 9.2)
)
x_new <- c(1995, 2005)
# Perform spline interpolation
interpolation(x = data$year, data = data, y_cols = c("birth_rate", "death_rate"), x_new = x_new, method = "spline")
data <- data.frame(
year = c(1990, 2000, 2010, 2020),
"1990"= c(24.5, 26.3, 28.1, 29.8),
"2000"= c(30.2, 31.1, 29.3, 33.1),
"2010" = c(28.2, 32.3, 31.1, 34.2),
"2020" = c(30.3, 34.1, 33.8, 35.2)
)
x_new <- c(1995, 2005, 2015)
# Perform spline interpolation
interpolation(x = "year", data = data, y_cols = c("1990","2000","2010","2020"), x_new = x_new, method = "spline")
names(data)
data <- data.frame(
year = c(1990, 2000, 2010, 2020),
"x1990" = c(24.5, 26.3, 28.1, 29.8),
"x2000" = c(30.2, 31.1, 29.3, 33.1),
"x2010" = c(28.2, 32.3, 31.1, 34.2),
"x2020" = c(30.3, 34.1, 33.8, 35.2)
)
x_new <- c(1995, 2005, 2015)
# Perform spline interpolation
interpolation(x = "year", data = data, y_cols = c("x1990","x2000","x2010","x2020"), x_new = x_new, method = "spline")
```
library(DemogAnr)
data <- data.frame(
year = c(1990, 2000, 2010, 2020),
"x1990" = c(24.5, 26.3, 28.1, 29.8),
"x2000" = c(30.2, 31.1, 29.3, 33.1),
"x2010" = c(28.2, 32.3, 31.1, 34.2),
"x2020" = c(30.3, 34.1, 33.8, 35.2)
)
x_new <- c(1995, 2005, 2015)
# Perform spline interpolation
interpolation(x = data$year, data = data, y_cols = c("x1990","x2000","x2010","x2020"), x_new = x_new, method = "spline")
library(DemogAnr)
x <- c(1990, 2000, 2010, 2020)
y <- c(24.5, 26.3, 28.1, 29.8)  # Example: Population in millions
x_new <- c(1995, 2005, 2015)
# Perform interpolation
interpolation(x, y, x_new, method = "linear")
data <- data.frame(
year = c(1990, 2000, 2010, 2020),
"x1990" = c(24.5, 26.3, 28.1, 29.8),
"x2000" = c(30.2, 31.1, 29.3, 33.1),
"x2010" = c(28.2, 32.3, 31.1, 34.2),
"x2020" = c(30.3, 34.1, 33.8, 35.2)
)
x_new <- c(1995, 2005, 2015)
# Perform spline interpolation
interpolation(x = data$year, data = data, y_cols = c("x1990","x2000","x2010","x2020"), x_new = x_new, method = "spline")
library(DemogAnr)
x <- c(1990, 2000, 2010, 2020)
y <- c(24.5, 26.3, 28.1, 29.8)  # Example: Population in millions
x_new <- c(1995, 2005, 2015)
# Perform interpolation
interpolation(x, y, x_new, method = "linear")
data <- data.frame(
year = c(1990, 2000, 2010, 2020),
"x1990" = c(24.5, 26.3, 28.1, 29.8),
"x2000" = c(30.2, 31.1, 29.3, 33.1),
"x2010" = c(28.2, 32.3, 31.1, 34.2),
"x2020" = c(30.3, 34.1, 33.8, 35.2)
)
x_new <- c(1995, 2005, 2015)
# Perform spline interpolation
interpolation(x = data$year, data = data, y_cols = c("x1990","x2000","x2010","x2020"), x_new = x_new, method = "spline")
library(devtools)
use_r()
use_r(flagout)
use_r("flagout")
install.packages(c("bayestestR", "broom.helpers", "cli", "diffobj", "globals", "gtsummary", "httpuv", "insight", "keras3", "labelled", "leafem", "miniUI", "parallelly", "parameters", "partykit", "pbkrtest", "pkgdown", "prodlim", "RcppArmadillo", "readstata13", "reformulas", "scales", "systemfonts", "textshaping", "tinytex", "utf8", "writexl", "xgboost"))
HH_MOD_I1 <- read_dta("C:/Users/PROXIMITY REPORT/Desktop/Poverty Analysis/Malawi data/IHS5/HH_MOD_I1.dta")
library(haven)
HH_MOD_I1 <- read_dta("C:/Users/PROXIMITY REPORT/Desktop/Poverty Analysis/Malawi data/IHS5/HH_MOD_I1.dta")
mum<- read_dta("C:/Users/PROXIMITY REPORT/Desktop/Poverty Analysis/Malawi data/IHS5/hh_mod_a_filt.dta")
# preparing the data for analysis
data <- mum |>
inner_join(HH_MOD_I1, by = "case_id") |>
mutate(across(where(is.labelled), as_factor),
logvalue = log(hh_i03/hhsize)) |>
filter(hh_i01 != "No")
library(dplyr)
HH_MOD_I1 <- read_dta("C:/Users/PROXIMITY REPORT/Desktop/Poverty Analysis/Malawi data/IHS5/HH_MOD_I1.dta")
mum<- read_dta("C:/Users/PROXIMITY REPORT/Desktop/Poverty Analysis/Malawi data/IHS5/hh_mod_a_filt.dta")
# preparing the data for analysis
data <- mum |>
inner_join(HH_MOD_I1, by = "case_id") |>
mutate(across(where(is.labelled), as_factor),
logvalue = log(hh_i03/hhsize)) |>
filter(hh_i01 != "No")
usethis::use_data(mum)
mum <- data
View(mum)
mum <- mum
mum <- mum |>
select(case_id,hh_i01, hh_i02, hh_i03, hhsize, logvalue, reside, region, hh_wgt)
View(mum)
usethis::use_data(mum)
usethis::use_data(mum, overwrite = T)
shiny::runApp()
runApp()
library(shiny)
library(shinythemes)
library(DT)
library(htmltools) # Not explicitly needed to load, but tags are from it.
runApp()
runApp()
